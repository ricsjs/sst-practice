// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PROFESSIONAL
  COMPANY
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password_hash String
  role          Role           @default(ADMIN)
  type          String
  created_at    DateTime       @default(now())
  Admin         Admin[]
  Empresa       Empresa[]
  Profissional  Profissional[]

  @@map("usuarios")
}

model Admin {
  id   String @id @default(uuid())
  name String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("admins")
}

model Empresa {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  cnpj             String
  corporate_reason String
  fantasy_name     String
  identification   String
  cep              String
  address          String
  neighborhood     String
  phone            String
  dt_start_esocial DateTime
  active           Boolean
  employee         Empregado[]
  Unidade          Unidade[]
  Aso              Aso[]

  @@map("empresas")
}

model Unidade {
  id        String  @id @default(uuid())
  company   Empresa @relation(fields: [companyId], references: [id])
  companyId String

  identification           String
  cnpj                     String
  cnea                     String
  activity                 String
  degree_of_risk           String
  aso                      String
  cep                      String
  address                  String
  neighborhood             String
  city                     String
  state                    String
  email                    String
  phone                    String
  legal_representative     String
  cpf_legal_representative String
  cipa_type                String
  num_employees_cipa       Int
  active                   Boolean

  @@map("unidades")
}

model Empregado {
  id String @id @default(uuid())

  company   Empresa @relation(fields: [companyId], references: [id])
  companyId String

  name         String
  cpf          String
  nis          String
  rg           String
  br_pdh       String
  sex          String
  dt_birth     DateTime
  phone        String
  phone_number String
  blood_type   String
  active       Boolean
  Aso          Aso[]

  @@map("empregados")
}

model Profissional {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  name      String
  cpf       String
  nis       String
  rg        String
  cbo       String
  formation String
  organ     String
  acronym   String
  ccr       String
  uf        String
  title     String
  function  String
  active    Boolean
  Aso       Aso[]

  @@map("profissionais")
}

model Aso {
  id String @id @default(uuid())

  company   Empresa @relation(fields: [empresaId], references: [id])
  empresaId String

  employee    Empregado @relation(fields: [empregadoId], references: [id])
  empregadoId String

  professional   Profissional @relation(fields: [profissionalId], references: [id])
  profissionalId String

  // occupational risks
  physical_occupational_risk     String?
  chemical_occupational_risk     String?
  biological_occupational_risk   String?
  occupational_risk_of_accidents String?
  ergonomic_occupational_risk    String?

  // critical activities
  work_at_height                        String
  selfpropelled_machines                String
  working_with_firearms                 String
  confined_space                        String
  food_handling                         String
  electrical_installations_and_services String
  observation                           String?
  conclusion                            String?

  doctor_responsible String
  local              String
  date               DateTime

  // examining doctor
  examining_doctor_fullname String
  examining_doctor_function String
  examining_doctor_crm      String

  // technical manager
  technical_manager_fullname String
  technical_manager_function String
  technical_manager_crm      String

  active Boolean
  Exam   Exam[]

  @@map("asos")
}

model Exam {
  id   String   @id @default(uuid())
  name String
  date DateTime

  aso   Aso    @relation(fields: [asoId], references: [id])
  asoId String

  @@map("exams")
}
