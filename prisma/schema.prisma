// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PROFESSIONAL
  COMPANY
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password_hash String?
  role          Role           @default(ADMIN)
  type          String
  created_at    DateTime       @default(now())
  Admin         Admin[]
  Empresa       Empresa[]
  Profissional  Profissional[]

  @@map("usuarios")
}

model Admin {
  id           String @id @default(uuid())
  name         String
  cpf          String
  phone_number String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("admins")
}

model Empresa {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  cnpj             String
  corporate_reason String
  fantasy_name     String
  identification   String
  cep              String
  address          String
  neighborhood     String
  phone            String
  dt_start_esocial DateTime
  active           Boolean
  employee         Empregado[]
  Unidade          Unidade[]
  Card             Card[]
  Documents        Documents[]

  @@map("empresas")
}

model Unidade {
  id        String  @id @default(uuid())
  company   Empresa @relation(fields: [companyId], references: [id])
  companyId String

  identification           String
  cnpj                     String
  cnae                     String
  activity                 String
  degree_of_risk           String
  cep                      String
  address                  String
  neighborhood             String
  city                     String
  state                    String
  email                    String
  reference_contact        String
  phone                    String
  legal_representative     String
  cpf_legal_representative String
  active                   Boolean
  employee                 Empregado[]

  @@map("unidades")
}

model Empregado {
  id String @id @default(uuid())

  company   Empresa @relation(fields: [companyId], references: [id])
  companyId String

  unit   Unidade? @relation(fields: [unitId], references: [id])
  unitId String?

  name              String
  cpf               String
  nis               String
  rg                String
  pcd               String
  pcd_observation   String
  sex               String
  dt_birth          DateTime
  phone_number      String
  admission_dt      DateTime
  function_start_dt DateTime
  office            String
  employee_function String
  registration      String
  sector            String
  active            Boolean
  cbo               String
  Card              Card[]
  Documents         Documents[]

  @@map("empregados")
}

model Profissional {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  name         String
  cpf          String
  rg           String
  formation    String
  organ        String
  acronym      String
  uf           String
  title        String
  phone_number String
  active       Boolean
  Card         Card[]
  Documents    Documents[]

  @@map("profissionais")
}

model Documents {
  id String @id @default(uuid())

  company   Empresa @relation(fields: [empresaId], references: [id])
  empresaId String

  employee    Empregado @relation(fields: [empregadoId], references: [id])
  empregadoId String

  professional   Profissional @relation(fields: [profissionalId], references: [id])
  profissionalId String

  name        String
  key         String
  contentType String
  createdAt   DateTime @default(now())

  Card Card[]

  @@map("documents")
}

model Card {
  id String @id @default(uuid())

  professional   Profissional @relation(fields: [professionalId], references: [id])
  professionalId String

  employee   Empregado @relation(fields: [employeeId], references: [id])
  employeeId String

  company   Empresa @relation(fields: [companyId], references: [id])
  companyId String

  document    Documents @relation(fields: [documentsId], references: [id])
  documentsId String

  createdAt DateTime @default(now())

  @@map("cards")
}
